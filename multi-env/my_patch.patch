diff --git a/libmelee/melee/console.py b/libmelee/melee/console.py
index 4649429..8f2829e 100644
--- a/libmelee/melee/console.py
+++ b/libmelee/melee/console.py
@@ -308,7 +308,9 @@ class Console:
             self._slippstream.shutdown()
             # If dolphin, kill the process
             if self._process is not None:
-                self._process.terminate()
+                # Sadly dolphin doesn't respect terminate
+                self._process.kill()
+                self._process.wait()
                 self._process = None
 
         if self.temp_dir:
diff --git a/melee-env/melee_env/dconfig.py b/melee-env/melee_env/dconfig.py
index 68b67ce..f639811 100644
--- a/melee-env/melee_env/dconfig.py
+++ b/melee-env/melee_env/dconfig.py
@@ -158,8 +158,8 @@ class DolphinConfig:
 
         config = configparser.ConfigParser()
         config.readfp(open(self.config_path))
+        print(":::CONFIG:::", config)
         config["Core"][f"sidevice{str(port-1)}"] = f"{controller_type.value}"
-
         with open(str(self.config_path), "w") as outfile:
             config.write(outfile)
 
diff --git a/melee-env/melee_env/myenv.py b/melee-env/melee_env/myenv.py
index 3000489..edffeaf 100644
--- a/melee-env/melee_env/myenv.py
+++ b/melee-env/melee_env/myenv.py
@@ -149,15 +149,15 @@ class MeleeEnv:
                 melee.MenuHelper.choose_versus_mode(self.gamestate, self.players[self.menu_control_agent].controller)
 
 
-    """def close(self):
+    def close(self):
         [player.controller.disconnect() for player in self.players if player is not None]
         # for t, c in self.controllers.items():
         #     c.disconnect()
         # self.observation_space._reset()
         self.gamestate = None
-        self.console.stop()"""
+        self.console.stop()
     
-    def close(self):
+    """def close(self):
         self.gamestate = None
         #self.console.stop()
         for proc in psutil.process_iter():
@@ -168,4 +168,4 @@ class MeleeEnv:
                 parent = psutil.Process(parent_pid)
                 for child in parent.children(recursive=True):
                     child.kill()
-                parent.kill()
\ No newline at end of file
+                parent.kill()"""
\ No newline at end of file
diff --git a/melee_rllib.py b/melee_rllib.py
index d1b81ff..8aff28c 100644
--- a/melee_rllib.py
+++ b/melee_rllib.py
@@ -29,6 +29,9 @@ class MyMeleeEnv(gym.Env):
         self.env = MeleeEnv(iso_path, players, fast_forward=True, ai_starts_game=True)
         self.env.start()
         
+        
+        board = np.array()
+        
         self.action_space = gym.spaces.Discrete(45)
         low = np.array([[-10000]*2*7]).reshape((2, 7))
         high = np.array([10000]*2*7).reshape((2, 7))
@@ -71,17 +74,11 @@ def save_model(algo, checkpoint_dir, iteration):
     checkpoint_path = algo.save(f"{checkpoint_dir}/checkpoint_{iteration}")
     print(f"Model saved at {checkpoint_path}")
 
-
-"""config = (
+config = (
     PPOConfig()
         .environment(env=MyMeleeEnv)
         .rollouts(num_rollout_workers=0, batch_mode="complete_episodes")
-)"""
-config = (PPOConfig().training(gamma=0.9, lr=0.01)
-        .environment(env="CartPole-v2")
-        .resources(num_gpus=0)
-        .env_runners(num_env_runners=0)
-    )
+)
 
 algo = config.build()
 #algo = Algorithm.from_checkpoint("/home/vlab/SSBM-RL/models/PPO/newstate_32agents/checkpoint_3000")
diff --git a/test.py b/test.py
index 07f53ab..142511d 100644
--- a/test.py
+++ b/test.py
@@ -56,7 +56,7 @@ tuner = tune.Tuner(
     param_space={
         "env": MyMeleeEnv,
         "kl_coeff": 1.0,
-        "num_workers": 1,
+        "num_workers": 3,
         "num_cpus": 32,  # number of CPUs to use per trial
         "num_gpus": 0,  # number of GPUs to use per trial
         # These params are tuned from a fixed starting value.
